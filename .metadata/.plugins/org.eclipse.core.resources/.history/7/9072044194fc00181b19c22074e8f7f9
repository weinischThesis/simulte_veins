// 
//                           SimuLTE
// 
// This file is part of a software released under the license included in file
// "license.pdf". This license can be also found at http://www.ltesimulator.com/
// The above file and the present reference are part of the software itself, 
// and cannot be removed from it.
//
package lte.simulations.thesis;

import inet.networklayer.configurator.ipv4.IPv4NetworkConfigurator;
import inet.networklayer.ipv4.RoutingTableRecorder;
import inet.node.inet.AdhocHost;
import inet.node.inet.Router;
import inet.node.inet.StandardHost;
import inet.node.ethernet.Eth10G;

import lte.world.radio.LteChannelControl;
import lte.epc.PgwStandardSimplified;
import lte.corenetwork.binder.LteBinder;
import lte.corenetwork.nodes.eNodeB;
import lte.corenetwork.nodes.Ue;
import lte.corenetwork.nodes.cars.Car;


import org.car2x.veins.modules.mobility.traci.TraCIScenarioManagerLaunchd;
import org.car2x.veins.modules.obstacle.ObstacleControl;
import org.car2x.veins.modules.world.annotations.AnnotationManager;
import org.car2x.veins.subprojects.veins_inet.VeinsInetManager;


network ErlangenLTE
{
    parameters:
        double playgroundSizeX @unit(m); // x size of the area the nodes are in (in meters)
        double playgroundSizeY @unit(m); // y size of the area the nodes are in (in meters)
        double playgroundSizeZ @unit(m); // z size of the area the nodes are in (in meters)
        @display("bgb=732,483");

    submodules:

        routingRecorder: RoutingTableRecorder {
        }
        configurator: IPv4NetworkConfigurator {
            config = xmldoc("demo.xml");
        }
         obstacles: ObstacleControl {
        }
        annotations: AnnotationManager {
        }

        //# Veins manager module
        veinsManager: VeinsInetManager {
        }

        //# LTE modules
        channelControl: LteChannelControl {
        }
        binder: LteBinder {
        }
        server: StandardHost {
        }
        router: Router {
        }
        pgw: PgwStandardSimplified {
            nodeType = "PGW";
        }
        eNodeB1: eNodeB {
		@display("p=644691.330162,5493356.214845");
	}
	 eNodeB2: eNodeB {
		@display("p=645552.991067,5493950.449954");
	}
	// eNodeB3: eNodeB {
	//	@display("p=645654.470900,5494487.923802");
	//}
	 //eNodeB4: eNodeB {
	//	@display("p=645025.696799,5494663.124268");
	//}

    connections allowunconnected:
        server.pppg++ <--> Eth10G <--> router.pppg++;
        router.pppg++ <--> Eth10G <--> pgw.filterGate;
      //  pgw.pppg++ <--> Eth10G <--> eNodeB4.ppp;
       // pgw.pppg++ <--> Eth10G <--> eNodeB3.ppp;
        pgw.pppg++ <--> Eth10G <--> eNodeB2.ppp;
		pgw.pppg++ <--> Eth10G <--> eNodeB1.ppp;

        //# X2 connections
        eNodeB1.x2++ <--> Eth10G <--> eNodeB2.x2++;
      //  	eNodeB1.x2++ <--> Eth10G <--> eNodeB2.x2++; 
	//eNodeB1.x2++ <--> Eth10G <--> eNodeB2.x2++; 
	//eNodeB1.x2++ <--> Eth10G <--> eNodeB4.x2++; 
	//eNodeB2.x2++ <--> Eth10G <--> eNodeB3.x2++; 
	//eNodeB2.x2++ <--> Eth10G <--> eNodeB4.x2++; 
	//eNodeB3.x2++ <--> Eth10G <--> eNodeB4.x2++; 
}

